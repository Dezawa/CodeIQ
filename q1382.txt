#! ruby21
# -*- coding: utf-8 -*-
require 'pp'
require 'prime'
=begin
CodeIQ 問1382@riverplus
   a≦b のとき、最小公倍数が50!（50の階乗）となるような組 (a,b) は
   全部で何組あるでしょうか。
への解
  回答時には削除していた unit test も付加
  個人的なメモで、他の人には理解不能であったろう「考え方」を
  理解できる人も出てくるかもしれない 程度には修正。

a,b のLCM が 50! ということは、
(1) a,bともに50!の約数。
(2) a,b,50!を素因数分解したとき、素数 primの因子の数を Px(prim)とすると、 どの素因数においても
     P_{50!}(prim) = [Pa(prime),Pb(prim)].max
そこで
  50! を素因数分解したときの 素数の種類の数を prim_no とすると
  (I) b=50! の時のaを数え上げる        
  (II) 50!の素因数分解の各素数に着目し、ある素数の数が足りない時の b について
      a を数え上げる。とりあえずは abの大小は考えずに。
  (III) (II)を拡張し、着目する素数を 1,2,3,, prim_no-1 個にして行う。
  (IV) (I)の個数 + (II)の個数/2 が答え((III)には a=bは無いから)

  (V) (IV)を拡張して、着目する素数 を 0..prim_no 個にして行って、1/2 する。
      ただし、a=b=50! は a ≦ b と b ≦ b の両方有るから、+1 してから 1/2
      
ということで、
 bの各素因数のどの素数の数を減らすか、の組み合わせ(0個から全部まで）の
 各組み合わせ毎に
    bの減らし方の数 * aの組み合わせ数
   
a組み合わせ数は
  素数pの数を減らした場合、aは素数pを50!と同じだけ持つ必要がある。
  その他の素数の数は(0～50!と同じなら)いくつでもよい。
  => 減らしてよい素数の減らし方の組み合わせ数

=end

# 素因数分解of階乗 のために class Array を拡張 
class Array
  # [ [a,n1],[b,n2],[c,n3] ].add([[a,m1],[c,m3],[d,m4]]) =>
  #              [[a,n1+m1],[b,n2],[c,n3+m3],[d,m4]]
  def sum(other)
    keys = (self.map{|a,b| a} + other.map{|a,b| a}).uniq
    keys.map{|k| [k,((a=self.assoc(k)) ? a[1] : 0) + ((b=other.assoc(k)) ? b[1] : 0)] }
  end
end

def 素因数分解of階乗(n)
  division  = (1..n).to_a.
              inject([]){|div,n| div.sum(Prime.prime_division(n)) }
end

# 素因数群 => [ [素数,個数],[素数,個数],,,]
#   1 と自分を含む 
def 素因数として素因数群を持つ数値の約数の数(素因数群) 
  素因数群.inject(1){|m,素数個数| m * (素数個数[1] + 1)}
end

#    素数群 => [ [素数,個数],[素数,個数],,,]
def 素数群のどの素数も必ず一つは使う組み合わせの数(素数群) 
   素数群.inject(1){|m,素数個数| m * 素数個数[1]}
end

def 何組？(n50)
  素因数分解of階乗50 = 素因数分解of階乗  n50
  素数の数           = 素因数分解of階乗50.size

  cnt=(0..素数の数).map{|bから減らす素数の数|
    素因数分解of階乗50.combination(bから減らす素数の数).map{|bから減らす素因数群|
        aから減らせる素因数群  = 素因数分解of階乗50 - bから減らす素因数群
        aの値の数 = 素因数として素因数群を持つ数値の約数の数 aから減らせる素因数群
                    # 少なくとも一つずつは減らす 
        bの値の数 = 素数群のどの素数も必ず一つは使う組み合わせの数 bから減らす素因数群
        aの値の数 * bの値の数
    }
  }.flatten.inject{|s,c| s + c }
  (cnt+1)/2
end
unless ARGV.empty?
  n = ARGV.shift.to_i
  printf "%d! の時 => %d \n",n, 何組？(n)
else
  gem "minitest"
  require "minitest/autorun"
  require 'minitest_helper'
  class TC_Class < MiniTest::Unit::TestCase

    must "6!の 素因数分解of階乗" do
      assert_equal [[2, 4], [3, 2], [5, 1]], 素因数分解of階乗(6)
    end
    must "素因数として[6!の 素因数分解]を持つ数値の約数の数" do
      #    1  2  4  8  16  5 10  20  40  80
      # 1  1  2  4  8  16  5 10  20  40  80
      # 3  3  6 12 24  48 15 30  60 120 240
      # 9  9 18 36 72 144 45 90 180 360 720   3*10 = 30
      assert_equal 30, 素因数として素因数群を持つ数値の約数の数(素因数分解of階乗 6)
    end
    must "素数群のどの素数も必ず一つは使う組み合わせの数" do
      素数群 = 素因数分解of階乗( 6)[0,2] #  [[2, 4], [3, 2]]
      #   2 4 8 16
      # 3
      # 9          2*4 = 8
      assert_equal 8, 素数群のどの素数も必ず一つは使う組み合わせの数(素数群)
    end
    must "4の時何組？" do;assert_equal 11, 何組？(4) ; end
    must "5の時何組？" do;assert_equal 32, 何組？(5) ; end
    must "6の時何組？" do;assert_equal 68, 何組？(6) ; end
  end
end


 
